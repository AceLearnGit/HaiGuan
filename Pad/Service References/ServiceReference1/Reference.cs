//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Pad.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetLayout", ReplyAction="http://tempuri.org/IService1/SetLayoutResponse")]
        void SetLayout(int row, int column);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetLayout", ReplyAction="http://tempuri.org/IService1/SetLayoutResponse")]
        System.Threading.Tasks.Task SetLayoutAsync(int row, int column);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddContentToScreen", ReplyAction="http://tempuri.org/IService1/AddContentToScreenResponse")]
        void AddContentToScreen(DataModel.SingleScreenItemInfo[] items);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddContentToScreen", ReplyAction="http://tempuri.org/IService1/AddContentToScreenResponse")]
        System.Threading.Tasks.Task AddContentToScreenAsync(DataModel.SingleScreenItemInfo[] items);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectWindow", ReplyAction="http://tempuri.org/IService1/SelectWindowResponse")]
        void SelectWindow(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectWindow", ReplyAction="http://tempuri.org/IService1/SelectWindowResponse")]
        System.Threading.Tasks.Task SelectWindowAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateWindowInfo", ReplyAction="http://tempuri.org/IService1/UpdateWindowInfoResponse")]
        void UpdateWindowInfo(DataModel.SingleScreenItemInfo screenInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateWindowInfo", ReplyAction="http://tempuri.org/IService1/UpdateWindowInfoResponse")]
        System.Threading.Tasks.Task UpdateWindowInfoAsync(DataModel.SingleScreenItemInfo screenInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCurrentWindowInfo", ReplyAction="http://tempuri.org/IService1/GetCurrentWindowInfoResponse")]
        DataModel.ScreenItemsInfo GetCurrentWindowInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCurrentWindowInfo", ReplyAction="http://tempuri.org/IService1/GetCurrentWindowInfoResponse")]
        System.Threading.Tasks.Task<DataModel.ScreenItemsInfo> GetCurrentWindowInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Go", ReplyAction="http://tempuri.org/IService1/GoResponse")]
        void Go(int index, string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Go", ReplyAction="http://tempuri.org/IService1/GoResponse")]
        System.Threading.Tasks.Task GoAsync(int index, string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Back", ReplyAction="http://tempuri.org/IService1/BackResponse")]
        void Back();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Back", ReplyAction="http://tempuri.org/IService1/BackResponse")]
        System.Threading.Tasks.Task BackAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetWindowSize", ReplyAction="http://tempuri.org/IService1/SetWindowSizeResponse")]
        void SetWindowSize(int index, int rowSpan, int columnSpan);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetWindowSize", ReplyAction="http://tempuri.org/IService1/SetWindowSizeResponse")]
        System.Threading.Tasks.Task SetWindowSizeAsync(int index, int rowSpan, int columnSpan);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ResetWindowSize", ReplyAction="http://tempuri.org/IService1/ResetWindowSizeResponse")]
        void ResetWindowSize(int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ResetWindowSize", ReplyAction="http://tempuri.org/IService1/ResetWindowSizeResponse")]
        System.Threading.Tasks.Task ResetWindowSizeAsync(int index);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Pad.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Pad.ServiceReference1.IService1>, Pad.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void SetLayout(int row, int column) {
            base.Channel.SetLayout(row, column);
        }
        
        public System.Threading.Tasks.Task SetLayoutAsync(int row, int column) {
            return base.Channel.SetLayoutAsync(row, column);
        }
        
        public void AddContentToScreen(DataModel.SingleScreenItemInfo[] items) {
            base.Channel.AddContentToScreen(items);
        }
        
        public System.Threading.Tasks.Task AddContentToScreenAsync(DataModel.SingleScreenItemInfo[] items) {
            return base.Channel.AddContentToScreenAsync(items);
        }
        
        public void SelectWindow(System.Guid id) {
            base.Channel.SelectWindow(id);
        }
        
        public System.Threading.Tasks.Task SelectWindowAsync(System.Guid id) {
            return base.Channel.SelectWindowAsync(id);
        }
        
        public void UpdateWindowInfo(DataModel.SingleScreenItemInfo screenInfo) {
            base.Channel.UpdateWindowInfo(screenInfo);
        }
        
        public System.Threading.Tasks.Task UpdateWindowInfoAsync(DataModel.SingleScreenItemInfo screenInfo) {
            return base.Channel.UpdateWindowInfoAsync(screenInfo);
        }
        
        public DataModel.ScreenItemsInfo GetCurrentWindowInfo() {
            return base.Channel.GetCurrentWindowInfo();
        }
        
        public System.Threading.Tasks.Task<DataModel.ScreenItemsInfo> GetCurrentWindowInfoAsync() {
            return base.Channel.GetCurrentWindowInfoAsync();
        }
        
        public void Go(int index, string url) {
            base.Channel.Go(index, url);
        }
        
        public System.Threading.Tasks.Task GoAsync(int index, string url) {
            return base.Channel.GoAsync(index, url);
        }
        
        public void Back() {
            base.Channel.Back();
        }
        
        public System.Threading.Tasks.Task BackAsync() {
            return base.Channel.BackAsync();
        }
        
        public void SetWindowSize(int index, int rowSpan, int columnSpan) {
            base.Channel.SetWindowSize(index, rowSpan, columnSpan);
        }
        
        public System.Threading.Tasks.Task SetWindowSizeAsync(int index, int rowSpan, int columnSpan) {
            return base.Channel.SetWindowSizeAsync(index, rowSpan, columnSpan);
        }
        
        public void ResetWindowSize(int index) {
            base.Channel.ResetWindowSize(index);
        }
        
        public System.Threading.Tasks.Task ResetWindowSizeAsync(int index) {
            return base.Channel.ResetWindowSizeAsync(index);
        }
    }
}
